/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type { Attack, AttackInterface } from "../Attack";

const _abi = [
  {
    inputs: [
      {
        internalType: "contract EtherGame",
        name: "_etherGame",
        type: "address",
      },
    ],
    stateMutability: "nonpayable",
    type: "constructor",
  },
  {
    inputs: [],
    name: "attack",
    outputs: [],
    stateMutability: "payable",
    type: "function",
    payable: true,
  },
];

const _bytecode =
  "0x608060405234801561001057600080fd5b506040516101da3803806101da8339818101604052810190610032919061008d565b806000806101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050610111565b600081519050610087816100fa565b92915050565b60006020828403121561009f57600080fd5b60006100ad84828501610078565b91505092915050565b60006100c1826100da565b9050919050565b60006100d3826100b6565b9050919050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b610103816100c8565b811461010e57600080fd5b50565b60bb8061011f6000396000f3fe6080604052600436106039576000357c0100000000000000000000000000000000000000000000000000000000900480639e5faafc14603e575b600080fd5b60446046565b005b60008060009054906101000a900473ffffffffffffffffffffffffffffffffffffffff1690508073ffffffffffffffffffffffffffffffffffffffff16fffea264697066735822122078555874133055406346c5fd866ae041425653697f33461aabcebe7b79be643364736f6c63430008000033";

type AttackConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: AttackConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Attack__factory extends ContractFactory {
  constructor(...args: AttackConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Attack";
  }

  deploy(
    _etherGame: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Attack> {
    return super.deploy(_etherGame, overrides || {}) as Promise<Attack>;
  }
  getDeployTransaction(
    _etherGame: string,
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(_etherGame, overrides || {});
  }
  attach(address: string): Attack {
    return super.attach(address) as Attack;
  }
  connect(signer: Signer): Attack__factory {
    return super.connect(signer) as Attack__factory;
  }
  static readonly contractName: "Attack";
  public readonly contractName: "Attack";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): AttackInterface {
    return new utils.Interface(_abi) as AttackInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Attack {
    return new Contract(address, _abi, signerOrProvider) as Attack;
  }
}
